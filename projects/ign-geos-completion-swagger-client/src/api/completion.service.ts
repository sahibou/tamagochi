/**
 * Autocompletion
 * Description de l'API du service d'autocompletion de l'IGN
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Response } from '../model/response';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CompletionService {

    protected basePath = 'https://wxs.ign.fr/essentiels/geoportail/geocodage/rest/0.1/completion';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Retourne des suggestions de complétion du texte
     * 
     * @param text Le texte devant être completé
     * @param terr Une limitation de la zone de recherche de localisants
     * @param poiType Filtre sur le type de localisant pour le type POI. Les valeurs possibles sont listées dans le getCapabilities du service d&#x27;autocompletion.
     * @param lonlat coordonnées (longitude,latitude) d&#x27;un localisant pour favoriser les candidats les plus proches.
     * @param type Le type de localisants recherchés. Il est possible de spécifier plusieurs types séparés par une virgule.
     * @param maximumResponses Le nombre maximum de réponses que l’on souhaite voir retournées (entre 1 et 15)
     * @param bbox Filtre avec une bbox suivant l&#x27;ordre xmin,ymin,xmax,ymax
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public completion(text: string, terr?: string, poiType?: string, lonlat?: string, type?: string, maximumResponses?: number, bbox?: string, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public completion(text: string, terr?: string, poiType?: string, lonlat?: string, type?: string, maximumResponses?: number, bbox?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public completion(text: string, terr?: string, poiType?: string, lonlat?: string, type?: string, maximumResponses?: number, bbox?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public completion(text: string, terr?: string, poiType?: string, lonlat?: string, type?: string, maximumResponses?: number, bbox?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (text === null || text === undefined) {
            throw new Error('Required parameter text was null or undefined when calling completion.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (text !== undefined && text !== null) {
            queryParameters = queryParameters.set('text', <any>text);
        }
        if (terr !== undefined && terr !== null) {
            queryParameters = queryParameters.set('terr', <any>terr);
        }
        if (poiType !== undefined && poiType !== null) {
            queryParameters = queryParameters.set('poiType', <any>poiType);
        }
        if (lonlat !== undefined && lonlat !== null) {
            queryParameters = queryParameters.set('lonlat', <any>lonlat);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (maximumResponses !== undefined && maximumResponses !== null) {
            queryParameters = queryParameters.set('maximumResponses', <any>maximumResponses);
        }
        if (bbox !== undefined && bbox !== null) {
            queryParameters = queryParameters.set('bbox', <any>bbox);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Response>('get',`${this.basePath}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
